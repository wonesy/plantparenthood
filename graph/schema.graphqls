########################################################
# Base objects
########################################################

# Defines a plant and its principle information
type Plant {
  id: ID!
  commonName: String!
  botanicalName: String!
  waterPreference: String!
  sunPreference: String!
  soilPreference: String!
  recommendedWateringSchedule: String!
}

# Member aka user
type Member {
  id: ID!
  email: String!
  createdOn: String!
}

# Defines a specific care regimen that should be adhered to when
# caring for a particular plant.
type CareRegimen {
  id: ID!
  waterml: Int!
  wateringCron: String!
}

# A plant owned by a member
type PlantBaby {
  id: ID!
  plant: Plant!
  ownerID: String!
  careRegimen: CareRegimen!
  location: String!
  nickname: String!
  addedOn: String!
}

# When a plant was last watered
type Watering {
  id: ID!
  wateredOn: String!
  amountml: Int!
  plantBabyID: String!
}


########################################################
# Input objects
########################################################
input NewMember {
  email: String!
  password: String!
}

input NewPlant {
  commonName: String!
  botanicalName: String!
  waterPreference: String!
  sunPreference: String!
  soilPreference: String!
}

input NewCareRegimen {
  waterml: Int!
  wateringCron: String!
}

input NewNurseryAddition {
  plantId: String!
  careRegimenId: String!
  nickname: String!
  location: String!
}

input NewWatering {
  plantBabyID: String!
  amountml: Int!
  wateredOn: String!
}

input Login {
  email: String!
  password: String!
}

input RefreshToken{
  token: String!
}

########################################################
# Queries and Mutations
########################################################
type Query {
  members: [Member!]!
  memberById(id: String!): Member!

  plants: [Plant!]!
  plantById(id: String!): Plant!

  nursery: [PlantBaby!]!
  plantFromNursery(id: String!): PlantBaby!

  careRegimens: [CareRegimen!]!
  careRegimenByID(id: String!): CareRegimen!

  waterings(plantBabyID: String!): [Watering!]!
}

type Mutation {
  createMember(input: NewMember!): Member!
  createPlant(input: NewPlant!): Plant!
  createCareRegimen(input: NewCareRegimen!): CareRegimen!
  addPlantToNursery(input: NewNurseryAddition!): PlantBaby!
  createWatering(input: NewWatering): Watering!

  login(input: Login!): String!
  refreshToken(input: RefreshToken!): String!
}